{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMcX8puztNtra0F3RX4gSsk"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":[],"metadata":{"id":"8669QSzAwViX"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kNh99qJvst2K","executionInfo":{"status":"ok","timestamp":1725127539470,"user_tz":-330,"elapsed":13408,"user":{"displayName":"Jyoti Patil","userId":"12077577292640517473"}},"outputId":"26714682-28d0-426f-f317-a45857ca1407"},"outputs":[{"name":"stdout","output_type":"stream","text":["Enter string: Hi, everyone\n"]},{"output_type":"execute_result","data":{"text/plain":["12"]},"metadata":{},"execution_count":55}],"source":["# Write a Python program to calculate the length of a string.\n","a = input('Enter string: ')\n","len(a)"]},{"cell_type":"code","source":["# Write a Python program to count the number of characters (character frequency) in a string.\n","# Sample String : google.com'\n","# Expected Result : {'o': 3, 'g': 2, '.': 1, 'e': 1, 'l': 1, 'm': 1, 'c':\n","a = list(input('Enter string: '))\n","dict1={}\n","for i in a:\n","    dict1 = ().fromkey(a)\n","    for i in keys"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Wbv1J-aGwakO","executionInfo":{"status":"ok","timestamp":1725214156999,"user_tz":-330,"elapsed":6059,"user":{"displayName":"Jyoti Patil","userId":"12077577292640517473"}},"outputId":"dad9ad23-c42d-456d-c6fd-9467273462a8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter string: cricket\n","c 2\n","r 1\n","i 1\n","k 1\n","e 1\n","t 1\n"]}]},{"cell_type":"code","source":["a = list(input('Enter string: '))\n","b={}\n","for i in range(0,len(A)):\n","  key\n","  count = 1\n"],"metadata":{"id":"DMlF3J_U2qna"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Write a Python program to get a string made of the first 2 and the last 2 chars from a given a string.\n","# If the string length is less than 2, return instead of the empty string.\n","b = input('Enter string:')\n","n = len(b)\n","if n >=2:\n","    print((b[0:2])+(b[n-2:n]))\n","else:\n","    print('')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Yz8q-vJVw5eZ","executionInfo":{"status":"ok","timestamp":1725244950788,"user_tz":-330,"elapsed":40859,"user":{"displayName":"Jyoti Patil","userId":"12077577292640517473"}},"outputId":"a6aab2c8-8d6f-4cbf-f111-5f143e429ada"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter string:Collection\n","Coon\n"]}]},{"cell_type":"code","source":["# Write a Python program to get a string from a given string where all\n","# occurrences of its first char have been changed to '$', except the first char itself.\n","p = input('Enter string: ')\n","q = input('Enter char to be replaced:')\n","r = p.find(q)\n","print(r)\n","s = input('Enter replacement char: ')\n","char = p[0:r+1]\n","p = p.replace(q,s)\n","p= char+p[r+1:]\n","p"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":105},"id":"3hca0nmM0lTv","executionInfo":{"status":"ok","timestamp":1725127399231,"user_tz":-330,"elapsed":42240,"user":{"displayName":"Jyoti Patil","userId":"12077577292640517473"}},"outputId":"ca8f503c-9fe5-4eb7-d2e1-c75578eed7c1"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Enter string: collection\n","Enter char to be replaced:o\n","1\n","Enter replacement char: •\n"]},{"output_type":"execute_result","data":{"text/plain":["'collecti•n'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":53}]},{"cell_type":"code","source":["# Write a Python program to get a single string from two given strings,\n","# separated by a space and swap the first two characters of each string.\n","a1 = input('Enter string2:')\n","b1 = a1[0:2]\n","print(b1)\n","a2 = input('Enter string2:')\n","b2 = a2[0:2]\n","a1 = a1.replace(b1,b2)\n","a2 = a2.replace(b2,b1)\n","c = a1 +' '+a2\n","c"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":87},"id":"p9vLn1Tc4Kkf","executionInfo":{"status":"ok","timestamp":1725168467276,"user_tz":-330,"elapsed":19691,"user":{"displayName":"Jyoti Patil","userId":"12077577292640517473"}},"outputId":"43eb4ad9-ea15-4db9-badd-02a30adfe5fd"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Enter string2:first\n","fi\n","Enter string2:second\n"]},{"output_type":"execute_result","data":{"text/plain":["'serst ficond'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":39}]},{"cell_type":"code","source":["#  Write a Python program to add 'ing' at the end of a given string (length should\n","# be at least 3). If the given string already ends with 'ing' then add 'ly' instead. If the\n","# string length of the given string is less than 3, leave it unchanged\n","\n","s = input('Enter string: ')\n","p = len(s)\n","if s.endswith('ing'):\n","    print(s+'ly')\n","else:\n","    print(s+'ing')"],"metadata":{"id":"qhVhQzBY7DJI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1725120945361,"user_tz":-330,"elapsed":6212,"user":{"displayName":"Jyoti Patil","userId":"12077577292640517473"}},"outputId":"4648483a-d909-4c0b-ef32-a8ef7d6205c6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter string: being\n","beingly\n"]}]},{"cell_type":"code","source":["# Write a Python program to find the first appearance of the substring 'not' and 'poor' from a given string, if 'bad' follows the 'poor', replace the whole 'not'...'poor'\n","# substring with 'good'. Return the resulting string.\n","f = input('Enter string: ')\n","f_not = f.find('not')\n","f_poor = f.find('poor')\n","if ('not' in f and 'poor' in f) and (f_not <= f_poor):\n","    print(f[0:f_not]+'good')\n","else:\n","    print(f)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cpYZbbnRp3-C","executionInfo":{"status":"ok","timestamp":1725163200780,"user_tz":-330,"elapsed":16490,"user":{"displayName":"Jyoti Patil","userId":"12077577292640517473"}},"outputId":"c8ba4caa-e727-4e49-fc37-cf52df699633"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter string: your voice is not that poor\n","your voice is good\n"]}]},{"cell_type":"code","source":["# Write a list of words and returns the length of the longest one.\n","\n","B = input('Enter the string:')\n","B_split = B.split(' ')\n","max1 = len(B_split[0])\n","word = B_split[0]\n","for i in B_split:\n","    if (len(i) > max1):\n","        max1 = len(i)\n","        word = i\n","print('Longest word of given string is '+ word)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Dw2iju0rvbVU","executionInfo":{"status":"ok","timestamp":1725167292910,"user_tz":-330,"elapsed":3159,"user":{"displayName":"Jyoti Patil","userId":"12077577292640517473"}},"outputId":"4eaef4ed-f2d6-4892-a62e-78addfdf487e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the string:Python program to find the first appearance of the substring\n","Longest word of given string is appearance\n"]}]},{"cell_type":"code","source":["# Write a Python program to remove the nth index character from a nonempty string.\n","a1 = input('Enter the string:')\n","n = int(input('Index to be removed:'))\n","b1 = a1[n:n+1]\n","a1.replace(b1,'')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":70},"id":"MxWp_EUT_EYq","executionInfo":{"status":"ok","timestamp":1725355870139,"user_tz":-330,"elapsed":9827,"user":{"displayName":"Jyoti Patil","userId":"12077577292640517473"}},"outputId":"8a878e64-6149-4599-a0e0-e3b86bb5f9c6"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Enter the string:i am good\n","Index to be removed:4\n"]},{"output_type":"execute_result","data":{"text/plain":["'iamgood'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["#WAP to remove the n th index character from a nonempty string\n","s = input(\"enter a string :\")\n","n = int(input(\"add index to remove: \"))\n","m_string=\"\"\n","for i in range(0,len(s)):\n","  if(i!=n):\n","    m_string += s[i]\n","print(m_string)"],"metadata":{"id":"w3xy78suQLzm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Write a Python program to change a given string to a new string where the first and last chars have been exchanged.\n","a = input('Enter the string:')\n","n = len(a)\n","a1 = a[0]\n","an = a[n-1]\n","final_a = an+a[1:n-2]+a1\n","final_a"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":53},"id":"nIOFkKcbEyMD","executionInfo":{"status":"ok","timestamp":1725170355713,"user_tz":-330,"elapsed":3520,"user":{"displayName":"Jyoti Patil","userId":"12077577292640517473"}},"outputId":"ecfe8a16-8ec1-40d7-94f8-39e4965394b8"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Enter the string:Python program to change a given string\n"]},{"output_type":"execute_result","data":{"text/plain":["'gython program to change a given striP'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":56}]},{"cell_type":"code","source":["s=input('enter the string:')\n","s1=s[0]\n","s2=s[-1]\n","s3=s2+s[1:-1]+s1\n","print(s3)"],"metadata":{"id":"-yqr8De7SE4t"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Write a Python program to remove the characters which have odd index values of a given string.\n","h = list(input('Enter the string:'))\n","print(h)\n","final_h = []\n","for i in range(len(h)):\n","    if i%2 != 0:\n","        final_h.append(h[i])\n","''.join(final_h)"],"metadata":{"id":"yA3EnA6CHlxD","colab":{"base_uri":"https://localhost:8080/","height":70},"executionInfo":{"status":"ok","timestamp":1725175988659,"user_tz":-330,"elapsed":5601,"user":{"displayName":"Jyoti Patil","userId":"12077577292640517473"}},"outputId":"79f2ec12-b40b-4369-a1be-cf460e4a7c7a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the string:Python program to remove\n","['P', 'y', 't', 'h', 'o', 'n', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 't', 'o', ' ', 'r', 'e', 'm', 'o', 'v', 'e']\n"]},{"output_type":"execute_result","data":{"text/plain":["'yhnpormt eoe'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":75}]},{"cell_type":"code","source":["def string(k):\n","    print(k.lower())\n","    print(k.upper())\n","result = string('subShiDlMKinh')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pbSqOx3gykPl","executionInfo":{"status":"ok","timestamp":1725520491477,"user_tz":-330,"elapsed":589,"user":{"displayName":"Jyoti Patil","userId":"12077577292640517473"}},"outputId":"7c3a6902-3066-4a5b-ae03-f4cf8751e812"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["subshidlmkinh\n","SUBSHIDLMKINH\n"]}]},{"cell_type":"code","source":["def lexicographic(s):\n","  (sorted(s), key =str.upper)\n","result = lexicographic('nbjyghkjhvgcxhvjlugnbm')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":263},"id":"Lgbq3_4DEtf8","executionInfo":{"status":"error","timestamp":1725521417374,"user_tz":-330,"elapsed":610,"user":{"displayName":"Jyoti Patil","userId":"12077577292640517473"}},"outputId":"7e679187-1d90-46e5-df42-4cc06d610710"},"execution_count":null,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"'key' is an invalid keyword argument for print()","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-11266f98cf2d>\u001b[0m in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mlexicographic\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m    \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msorted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupper\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlexicographic\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'nbjyghkjhvgcxhvjlugnbm'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-5-11266f98cf2d>\u001b[0m in \u001b[0;36mlexicographic\u001b[0;34m(s)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mlexicographic\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m    \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msorted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupper\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlexicographic\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'nbjyghkjhvgcxhvjlugnbm'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: 'key' is an invalid keyword argument for print()"]}]},{"cell_type":"code","source":["str1 = 'Python  print\\n'\n","print(str1)\n","print(str1.rstrip())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uVRYgzIjPDyz","executionInfo":{"status":"ok","timestamp":1725524068182,"user_tz":-330,"elapsed":591,"user":{"displayName":"Jyoti Patil","userId":"12077577292640517473"}},"outputId":"ffcfff62-10ee-471a-f745-d7a27dfe488c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Python  print\n","\n","Python  print\n"]}]},{"cell_type":"code","source":["# Write a Python program to check whether a string starts with specified characters\n","str1 = input('Enter string:')\n","char = input('Starting char:')\n","str1.startswith(char)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xlx5ged-P8mq","executionInfo":{"status":"ok","timestamp":1725524643168,"user_tz":-330,"elapsed":7037,"user":{"displayName":"Jyoti Patil","userId":"12077577292640517473"}},"outputId":"20ae70cf-1fb0-40e4-941d-082368121dba"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Enter string:regain\n","Starting char:re\n"]},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["help(str)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"qJiy82Q_QW4z","executionInfo":{"status":"ok","timestamp":1725524222689,"user_tz":-330,"elapsed":593,"user":{"displayName":"Jyoti Patil","userId":"12077577292640517473"}},"outputId":"c8b565f2-03f9-4d6f-9802-502bb83f6edc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Help on class str in module builtins:\n","\n","class str(object)\n"," |  str(object='') -> str\n"," |  str(bytes_or_buffer[, encoding[, errors]]) -> str\n"," |  \n"," |  Create a new string object from the given object. If encoding or\n"," |  errors is specified, then the object must expose a data buffer\n"," |  that will be decoded using the given encoding and error handler.\n"," |  Otherwise, returns the result of object.__str__() (if defined)\n"," |  or repr(object).\n"," |  encoding defaults to sys.getdefaultencoding().\n"," |  errors defaults to 'strict'.\n"," |  \n"," |  Methods defined here:\n"," |  \n"," |  __add__(self, value, /)\n"," |      Return self+value.\n"," |  \n"," |  __contains__(self, key, /)\n"," |      Return key in self.\n"," |  \n"," |  __eq__(self, value, /)\n"," |      Return self==value.\n"," |  \n"," |  __format__(self, format_spec, /)\n"," |      Return a formatted version of the string as described by format_spec.\n"," |  \n"," |  __ge__(self, value, /)\n"," |      Return self>=value.\n"," |  \n"," |  __getattribute__(self, name, /)\n"," |      Return getattr(self, name).\n"," |  \n"," |  __getitem__(self, key, /)\n"," |      Return self[key].\n"," |  \n"," |  __getnewargs__(...)\n"," |  \n"," |  __gt__(self, value, /)\n"," |      Return self>value.\n"," |  \n"," |  __hash__(self, /)\n"," |      Return hash(self).\n"," |  \n"," |  __iter__(self, /)\n"," |      Implement iter(self).\n"," |  \n"," |  __le__(self, value, /)\n"," |      Return self<=value.\n"," |  \n"," |  __len__(self, /)\n"," |      Return len(self).\n"," |  \n"," |  __lt__(self, value, /)\n"," |      Return self<value.\n"," |  \n"," |  __mod__(self, value, /)\n"," |      Return self%value.\n"," |  \n"," |  __mul__(self, value, /)\n"," |      Return self*value.\n"," |  \n"," |  __ne__(self, value, /)\n"," |      Return self!=value.\n"," |  \n"," |  __repr__(self, /)\n"," |      Return repr(self).\n"," |  \n"," |  __rmod__(self, value, /)\n"," |      Return value%self.\n"," |  \n"," |  __rmul__(self, value, /)\n"," |      Return value*self.\n"," |  \n"," |  __sizeof__(self, /)\n"," |      Return the size of the string in memory, in bytes.\n"," |  \n"," |  __str__(self, /)\n"," |      Return str(self).\n"," |  \n"," |  capitalize(self, /)\n"," |      Return a capitalized version of the string.\n"," |      \n"," |      More specifically, make the first character have upper case and the rest lower\n"," |      case.\n"," |  \n"," |  casefold(self, /)\n"," |      Return a version of the string suitable for caseless comparisons.\n"," |  \n"," |  center(self, width, fillchar=' ', /)\n"," |      Return a centered string of length width.\n"," |      \n"," |      Padding is done using the specified fill character (default is a space).\n"," |  \n"," |  count(...)\n"," |      S.count(sub[, start[, end]]) -> int\n"," |      \n"," |      Return the number of non-overlapping occurrences of substring sub in\n"," |      string S[start:end].  Optional arguments start and end are\n"," |      interpreted as in slice notation.\n"," |  \n"," |  encode(self, /, encoding='utf-8', errors='strict')\n"," |      Encode the string using the codec registered for encoding.\n"," |      \n"," |      encoding\n"," |        The encoding in which to encode the string.\n"," |      errors\n"," |        The error handling scheme to use for encoding errors.\n"," |        The default is 'strict' meaning that encoding errors raise a\n"," |        UnicodeEncodeError.  Other possible values are 'ignore', 'replace' and\n"," |        'xmlcharrefreplace' as well as any other name registered with\n"," |        codecs.register_error that can handle UnicodeEncodeErrors.\n"," |  \n"," |  endswith(...)\n"," |      S.endswith(suffix[, start[, end]]) -> bool\n"," |      \n"," |      Return True if S ends with the specified suffix, False otherwise.\n"," |      With optional start, test S beginning at that position.\n"," |      With optional end, stop comparing S at that position.\n"," |      suffix can also be a tuple of strings to try.\n"," |  \n"," |  expandtabs(self, /, tabsize=8)\n"," |      Return a copy where all tab characters are expanded using spaces.\n"," |      \n"," |      If tabsize is not given, a tab size of 8 characters is assumed.\n"," |  \n"," |  find(...)\n"," |      S.find(sub[, start[, end]]) -> int\n"," |      \n"," |      Return the lowest index in S where substring sub is found,\n"," |      such that sub is contained within S[start:end].  Optional\n"," |      arguments start and end are interpreted as in slice notation.\n"," |      \n"," |      Return -1 on failure.\n"," |  \n"," |  format(...)\n"," |      S.format(*args, **kwargs) -> str\n"," |      \n"," |      Return a formatted version of S, using substitutions from args and kwargs.\n"," |      The substitutions are identified by braces ('{' and '}').\n"," |  \n"," |  format_map(...)\n"," |      S.format_map(mapping) -> str\n"," |      \n"," |      Return a formatted version of S, using substitutions from mapping.\n"," |      The substitutions are identified by braces ('{' and '}').\n"," |  \n"," |  index(...)\n"," |      S.index(sub[, start[, end]]) -> int\n"," |      \n"," |      Return the lowest index in S where substring sub is found,\n"," |      such that sub is contained within S[start:end].  Optional\n"," |      arguments start and end are interpreted as in slice notation.\n"," |      \n"," |      Raises ValueError when the substring is not found.\n"," |  \n"," |  isalnum(self, /)\n"," |      Return True if the string is an alpha-numeric string, False otherwise.\n"," |      \n"," |      A string is alpha-numeric if all characters in the string are alpha-numeric and\n"," |      there is at least one character in the string.\n"," |  \n"," |  isalpha(self, /)\n"," |      Return True if the string is an alphabetic string, False otherwise.\n"," |      \n"," |      A string is alphabetic if all characters in the string are alphabetic and there\n"," |      is at least one character in the string.\n"," |  \n"," |  isascii(self, /)\n"," |      Return True if all characters in the string are ASCII, False otherwise.\n"," |      \n"," |      ASCII characters have code points in the range U+0000-U+007F.\n"," |      Empty string is ASCII too.\n"," |  \n"," |  isdecimal(self, /)\n"," |      Return True if the string is a decimal string, False otherwise.\n"," |      \n"," |      A string is a decimal string if all characters in the string are decimal and\n"," |      there is at least one character in the string.\n"," |  \n"," |  isdigit(self, /)\n"," |      Return True if the string is a digit string, False otherwise.\n"," |      \n"," |      A string is a digit string if all characters in the string are digits and there\n"," |      is at least one character in the string.\n"," |  \n"," |  isidentifier(self, /)\n"," |      Return True if the string is a valid Python identifier, False otherwise.\n"," |      \n"," |      Call keyword.iskeyword(s) to test whether string s is a reserved identifier,\n"," |      such as \"def\" or \"class\".\n"," |  \n"," |  islower(self, /)\n"," |      Return True if the string is a lowercase string, False otherwise.\n"," |      \n"," |      A string is lowercase if all cased characters in the string are lowercase and\n"," |      there is at least one cased character in the string.\n"," |  \n"," |  isnumeric(self, /)\n"," |      Return True if the string is a numeric string, False otherwise.\n"," |      \n"," |      A string is numeric if all characters in the string are numeric and there is at\n"," |      least one character in the string.\n"," |  \n"," |  isprintable(self, /)\n"," |      Return True if the string is printable, False otherwise.\n"," |      \n"," |      A string is printable if all of its characters are considered printable in\n"," |      repr() or if it is empty.\n"," |  \n"," |  isspace(self, /)\n"," |      Return True if the string is a whitespace string, False otherwise.\n"," |      \n"," |      A string is whitespace if all characters in the string are whitespace and there\n"," |      is at least one character in the string.\n"," |  \n"," |  istitle(self, /)\n"," |      Return True if the string is a title-cased string, False otherwise.\n"," |      \n"," |      In a title-cased string, upper- and title-case characters may only\n"," |      follow uncased characters and lowercase characters only cased ones.\n"," |  \n"," |  isupper(self, /)\n"," |      Return True if the string is an uppercase string, False otherwise.\n"," |      \n"," |      A string is uppercase if all cased characters in the string are uppercase and\n"," |      there is at least one cased character in the string.\n"," |  \n"," |  join(self, iterable, /)\n"," |      Concatenate any number of strings.\n"," |      \n"," |      The string whose method is called is inserted in between each given string.\n"," |      The result is returned as a new string.\n"," |      \n"," |      Example: '.'.join(['ab', 'pq', 'rs']) -> 'ab.pq.rs'\n"," |  \n"," |  ljust(self, width, fillchar=' ', /)\n"," |      Return a left-justified string of length width.\n"," |      \n"," |      Padding is done using the specified fill character (default is a space).\n"," |  \n"," |  lower(self, /)\n"," |      Return a copy of the string converted to lowercase.\n"," |  \n"," |  lstrip(self, chars=None, /)\n"," |      Return a copy of the string with leading whitespace removed.\n"," |      \n"," |      If chars is given and not None, remove characters in chars instead.\n"," |  \n"," |  partition(self, sep, /)\n"," |      Partition the string into three parts using the given separator.\n"," |      \n"," |      This will search for the separator in the string.  If the separator is found,\n"," |      returns a 3-tuple containing the part before the separator, the separator\n"," |      itself, and the part after it.\n"," |      \n"," |      If the separator is not found, returns a 3-tuple containing the original string\n"," |      and two empty strings.\n"," |  \n"," |  removeprefix(self, prefix, /)\n"," |      Return a str with the given prefix string removed if present.\n"," |      \n"," |      If the string starts with the prefix string, return string[len(prefix):].\n"," |      Otherwise, return a copy of the original string.\n"," |  \n"," |  removesuffix(self, suffix, /)\n"," |      Return a str with the given suffix string removed if present.\n"," |      \n"," |      If the string ends with the suffix string and that suffix is not empty,\n"," |      return string[:-len(suffix)]. Otherwise, return a copy of the original\n"," |      string.\n"," |  \n"," |  replace(self, old, new, count=-1, /)\n"," |      Return a copy with all occurrences of substring old replaced by new.\n"," |      \n"," |        count\n"," |          Maximum number of occurrences to replace.\n"," |          -1 (the default value) means replace all occurrences.\n"," |      \n"," |      If the optional argument count is given, only the first count occurrences are\n"," |      replaced.\n"," |  \n"," |  rfind(...)\n"," |      S.rfind(sub[, start[, end]]) -> int\n"," |      \n"," |      Return the highest index in S where substring sub is found,\n"," |      such that sub is contained within S[start:end].  Optional\n"," |      arguments start and end are interpreted as in slice notation.\n"," |      \n"," |      Return -1 on failure.\n"," |  \n"," |  rindex(...)\n"," |      S.rindex(sub[, start[, end]]) -> int\n"," |      \n"," |      Return the highest index in S where substring sub is found,\n"," |      such that sub is contained within S[start:end].  Optional\n"," |      arguments start and end are interpreted as in slice notation.\n"," |      \n"," |      Raises ValueError when the substring is not found.\n"," |  \n"," |  rjust(self, width, fillchar=' ', /)\n"," |      Return a right-justified string of length width.\n"," |      \n"," |      Padding is done using the specified fill character (default is a space).\n"," |  \n"," |  rpartition(self, sep, /)\n"," |      Partition the string into three parts using the given separator.\n"," |      \n"," |      This will search for the separator in the string, starting at the end. If\n"," |      the separator is found, returns a 3-tuple containing the part before the\n"," |      separator, the separator itself, and the part after it.\n"," |      \n"," |      If the separator is not found, returns a 3-tuple containing two empty strings\n"," |      and the original string.\n"," |  \n"," |  rsplit(self, /, sep=None, maxsplit=-1)\n"," |      Return a list of the substrings in the string, using sep as the separator string.\n"," |      \n"," |        sep\n"," |          The separator used to split the string.\n"," |      \n"," |          When set to None (the default value), will split on any whitespace\n"," |          character (including \\\\n \\\\r \\\\t \\\\f and spaces) and will discard\n"," |          empty strings from the result.\n"," |        maxsplit\n"," |          Maximum number of splits (starting from the left).\n"," |          -1 (the default value) means no limit.\n"," |      \n"," |      Splitting starts at the end of the string and works to the front.\n"," |  \n"," |  rstrip(self, chars=None, /)\n"," |      Return a copy of the string with trailing whitespace removed.\n"," |      \n"," |      If chars is given and not None, remove characters in chars instead.\n"," |  \n"," |  split(self, /, sep=None, maxsplit=-1)\n"," |      Return a list of the substrings in the string, using sep as the separator string.\n"," |      \n"," |        sep\n"," |          The separator used to split the string.\n"," |      \n"," |          When set to None (the default value), will split on any whitespace\n"," |          character (including \\\\n \\\\r \\\\t \\\\f and spaces) and will discard\n"," |          empty strings from the result.\n"," |        maxsplit\n"," |          Maximum number of splits (starting from the left).\n"," |          -1 (the default value) means no limit.\n"," |      \n"," |      Note, str.split() is mainly useful for data that has been intentionally\n"," |      delimited.  With natural text that includes punctuation, consider using\n"," |      the regular expression module.\n"," |  \n"," |  splitlines(self, /, keepends=False)\n"," |      Return a list of the lines in the string, breaking at line boundaries.\n"," |      \n"," |      Line breaks are not included in the resulting list unless keepends is given and\n"," |      true.\n"," |  \n"," |  startswith(...)\n"," |      S.startswith(prefix[, start[, end]]) -> bool\n"," |      \n"," |      Return True if S starts with the specified prefix, False otherwise.\n"," |      With optional start, test S beginning at that position.\n"," |      With optional end, stop comparing S at that position.\n"," |      prefix can also be a tuple of strings to try.\n"," |  \n"," |  strip(self, chars=None, /)\n"," |      Return a copy of the string with leading and trailing whitespace removed.\n"," |      \n"," |      If chars is given and not None, remove characters in chars instead.\n"," |  \n"," |  swapcase(self, /)\n"," |      Convert uppercase characters to lowercase and lowercase characters to uppercase.\n"," |  \n"," |  title(self, /)\n"," |      Return a version of the string where each word is titlecased.\n"," |      \n"," |      More specifically, words start with uppercased characters and all remaining\n"," |      cased characters have lower case.\n"," |  \n"," |  translate(self, table, /)\n"," |      Replace each character in the string using the given translation table.\n"," |      \n"," |        table\n"," |          Translation table, which must be a mapping of Unicode ordinals to\n"," |          Unicode ordinals, strings, or None.\n"," |      \n"," |      The table must implement lookup/indexing via __getitem__, for instance a\n"," |      dictionary or list.  If this operation raises LookupError, the character is\n"," |      left untouched.  Characters mapped to None are deleted.\n"," |  \n"," |  upper(self, /)\n"," |      Return a copy of the string converted to uppercase.\n"," |  \n"," |  zfill(self, width, /)\n"," |      Pad a numeric string with zeros on the left, to fill a field of the given width.\n"," |      \n"," |      The string is never truncated.\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Static methods defined here:\n"," |  \n"," |  __new__(*args, **kwargs) from builtins.type\n"," |      Create and return a new object.  See help(type) for accurate signature.\n"," |  \n"," |  maketrans(...)\n"," |      Return a translation table usable for str.translate().\n"," |      \n"," |      If there is only one argument, it must be a dictionary mapping Unicode\n"," |      ordinals (integers) or characters to Unicode ordinals, strings or None.\n"," |      Character keys will be then converted to ordinals.\n"," |      If there are two arguments, they must be strings of equal length, and\n"," |      in the resulting dictionary, each character in x will be mapped to the\n"," |      character at the same position in y. If there is a third argument, it\n"," |      must be a string, whose characters will be mapped to None in the result.\n","\n"]}]},{"cell_type":"code","source":["a = (input('Enter string: ')).split(' ')\n","count = 0\n","for i in range(0,len(a)):\n","    count = 1\n","    for j in range(i+1,len(a)):\n","        if a[i]==a[j]:\n","            count = count +1\n","            a[j] ='0'\n","    if(a[i] != \"0\"):\n","        print(a[i]+' '+str(count))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VUd6XjQ-uE9Z","executionInfo":{"status":"ok","timestamp":1725358038261,"user_tz":-330,"elapsed":9951,"user":{"displayName":"Jyoti Patil","userId":"12077577292640517473"}},"outputId":"13528736-85cb-42ad-ba57-e58b42c439ae"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter string: apple banana treeapple banana tree apple banana tree apple banana tree\n","apple 3\n","banana 4\n","treeapple 1\n","tree 3\n"]}]},{"cell_type":"code","source":["# 28. Write a Python program to add a prefix text to all of the lines in a string.\n","text = (input('Enter content: ')).split('.')\n","prefix_1 = input('Enter prefix to add: ')\n","text_1 =prefix_1.join(text)\n","print('Note: '+text_1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pKTle5Brt3Wt","executionInfo":{"status":"ok","timestamp":1725717649508,"user_tz":-330,"elapsed":8306,"user":{"displayName":"Jyoti Patil","userId":"12077577292640517473"}},"outputId":"148c6560-0b01-41ae-a2d8-8e3317bc8dc2"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter content: General characteristics. Astronomers sometimes divide the Solar System structure into separate regions. The inner Solar System includes Mercury, Venus, Earth, Mars, and the bodies in the asteroid belt. The outer Solar System includes Jupiter, Saturn, Uranus, Neptune, and the bodies in the Kuiper belt.\n","Enter prefix to add: Note:\n","Note: General characteristicsNote: Astronomers sometimes divide the Solar System structure into separate regionsNote: The inner Solar System includes Mercury, Venus, Earth, Mars, and the bodies in the asteroid beltNote: The outer Solar System includes Jupiter, Saturn, Uranus, Neptune, and the bodies in the Kuiper beltNote:\n"]}]},{"cell_type":"code","source":["text_2 = input('Enter Content: ')\n","text_new = text_2.replace('.','. Note:')\n","print('Note: ',text_new)"],"metadata":{"id":"WMrZx9McxGmQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Write a Python program that accepts a comma separated sequence of words as input and prints the unique words in sorted form (alphanumerically).\n","l = (input('Enter comma seperated words: ')).split(',')\n","l1 = set(l)\n","l2 = list(l1)\n","l3 = sorted(l2)\n","','.join(l3)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":53},"id":"fPslZajUnsJN","executionInfo":{"status":"ok","timestamp":1725245869866,"user_tz":-330,"elapsed":17173,"user":{"displayName":"Jyoti Patil","userId":"12077577292640517473"}},"outputId":"78f1cef6-5079-4ef8-f368-c3a6fc621769"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Enter comma seperated words: zebra,tomato,potato,king,orange,21,145,36,9\n"]},{"output_type":"execute_result","data":{"text/plain":["'145,21,36,9,king,orange,potato,tomato,zebra'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":[],"metadata":{"id":"fqA8itS2rEMU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["s = 'i am good $ '\n","s.strip('$ ')\n","s"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"rmUAf9JrNeBf","executionInfo":{"status":"ok","timestamp":1725356173817,"user_tz":-330,"elapsed":616,"user":{"displayName":"Jyoti Patil","userId":"12077577292640517473"}},"outputId":"3af82ccd-9e0f-4053-f854-25b320f9822b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'i am good $ '"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["help(str)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mViMjooIM_mA","executionInfo":{"status":"ok","timestamp":1725355550581,"user_tz":-330,"elapsed":1181,"user":{"displayName":"Jyoti Patil","userId":"12077577292640517473"}},"outputId":"dccb645d-7a22-461b-d595-fd34bfaec07b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Help on class str in module builtins:\n","\n","class str(object)\n"," |  str(object='') -> str\n"," |  str(bytes_or_buffer[, encoding[, errors]]) -> str\n"," |  \n"," |  Create a new string object from the given object. If encoding or\n"," |  errors is specified, then the object must expose a data buffer\n"," |  that will be decoded using the given encoding and error handler.\n"," |  Otherwise, returns the result of object.__str__() (if defined)\n"," |  or repr(object).\n"," |  encoding defaults to sys.getdefaultencoding().\n"," |  errors defaults to 'strict'.\n"," |  \n"," |  Methods defined here:\n"," |  \n"," |  __add__(self, value, /)\n"," |      Return self+value.\n"," |  \n"," |  __contains__(self, key, /)\n"," |      Return key in self.\n"," |  \n"," |  __eq__(self, value, /)\n"," |      Return self==value.\n"," |  \n"," |  __format__(self, format_spec, /)\n"," |      Return a formatted version of the string as described by format_spec.\n"," |  \n"," |  __ge__(self, value, /)\n"," |      Return self>=value.\n"," |  \n"," |  __getattribute__(self, name, /)\n"," |      Return getattr(self, name).\n"," |  \n"," |  __getitem__(self, key, /)\n"," |      Return self[key].\n"," |  \n"," |  __getnewargs__(...)\n"," |  \n"," |  __gt__(self, value, /)\n"," |      Return self>value.\n"," |  \n"," |  __hash__(self, /)\n"," |      Return hash(self).\n"," |  \n"," |  __iter__(self, /)\n"," |      Implement iter(self).\n"," |  \n"," |  __le__(self, value, /)\n"," |      Return self<=value.\n"," |  \n"," |  __len__(self, /)\n"," |      Return len(self).\n"," |  \n"," |  __lt__(self, value, /)\n"," |      Return self<value.\n"," |  \n"," |  __mod__(self, value, /)\n"," |      Return self%value.\n"," |  \n"," |  __mul__(self, value, /)\n"," |      Return self*value.\n"," |  \n"," |  __ne__(self, value, /)\n"," |      Return self!=value.\n"," |  \n"," |  __repr__(self, /)\n"," |      Return repr(self).\n"," |  \n"," |  __rmod__(self, value, /)\n"," |      Return value%self.\n"," |  \n"," |  __rmul__(self, value, /)\n"," |      Return value*self.\n"," |  \n"," |  __sizeof__(self, /)\n"," |      Return the size of the string in memory, in bytes.\n"," |  \n"," |  __str__(self, /)\n"," |      Return str(self).\n"," |  \n"," |  capitalize(self, /)\n"," |      Return a capitalized version of the string.\n"," |      \n"," |      More specifically, make the first character have upper case and the rest lower\n"," |      case.\n"," |  \n"," |  casefold(self, /)\n"," |      Return a version of the string suitable for caseless comparisons.\n"," |  \n"," |  center(self, width, fillchar=' ', /)\n"," |      Return a centered string of length width.\n"," |      \n"," |      Padding is done using the specified fill character (default is a space).\n"," |  \n"," |  count(...)\n"," |      S.count(sub[, start[, end]]) -> int\n"," |      \n"," |      Return the number of non-overlapping occurrences of substring sub in\n"," |      string S[start:end].  Optional arguments start and end are\n"," |      interpreted as in slice notation.\n"," |  \n"," |  encode(self, /, encoding='utf-8', errors='strict')\n"," |      Encode the string using the codec registered for encoding.\n"," |      \n"," |      encoding\n"," |        The encoding in which to encode the string.\n"," |      errors\n"," |        The error handling scheme to use for encoding errors.\n"," |        The default is 'strict' meaning that encoding errors raise a\n"," |        UnicodeEncodeError.  Other possible values are 'ignore', 'replace' and\n"," |        'xmlcharrefreplace' as well as any other name registered with\n"," |        codecs.register_error that can handle UnicodeEncodeErrors.\n"," |  \n"," |  endswith(...)\n"," |      S.endswith(suffix[, start[, end]]) -> bool\n"," |      \n"," |      Return True if S ends with the specified suffix, False otherwise.\n"," |      With optional start, test S beginning at that position.\n"," |      With optional end, stop comparing S at that position.\n"," |      suffix can also be a tuple of strings to try.\n"," |  \n"," |  expandtabs(self, /, tabsize=8)\n"," |      Return a copy where all tab characters are expanded using spaces.\n"," |      \n"," |      If tabsize is not given, a tab size of 8 characters is assumed.\n"," |  \n"," |  find(...)\n"," |      S.find(sub[, start[, end]]) -> int\n"," |      \n"," |      Return the lowest index in S where substring sub is found,\n"," |      such that sub is contained within S[start:end].  Optional\n"," |      arguments start and end are interpreted as in slice notation.\n"," |      \n"," |      Return -1 on failure.\n"," |  \n"," |  format(...)\n"," |      S.format(*args, **kwargs) -> str\n"," |      \n"," |      Return a formatted version of S, using substitutions from args and kwargs.\n"," |      The substitutions are identified by braces ('{' and '}').\n"," |  \n"," |  format_map(...)\n"," |      S.format_map(mapping) -> str\n"," |      \n"," |      Return a formatted version of S, using substitutions from mapping.\n"," |      The substitutions are identified by braces ('{' and '}').\n"," |  \n"," |  index(...)\n"," |      S.index(sub[, start[, end]]) -> int\n"," |      \n"," |      Return the lowest index in S where substring sub is found,\n"," |      such that sub is contained within S[start:end].  Optional\n"," |      arguments start and end are interpreted as in slice notation.\n"," |      \n"," |      Raises ValueError when the substring is not found.\n"," |  \n"," |  isalnum(self, /)\n"," |      Return True if the string is an alpha-numeric string, False otherwise.\n"," |      \n"," |      A string is alpha-numeric if all characters in the string are alpha-numeric and\n"," |      there is at least one character in the string.\n"," |  \n"," |  isalpha(self, /)\n"," |      Return True if the string is an alphabetic string, False otherwise.\n"," |      \n"," |      A string is alphabetic if all characters in the string are alphabetic and there\n"," |      is at least one character in the string.\n"," |  \n"," |  isascii(self, /)\n"," |      Return True if all characters in the string are ASCII, False otherwise.\n"," |      \n"," |      ASCII characters have code points in the range U+0000-U+007F.\n"," |      Empty string is ASCII too.\n"," |  \n"," |  isdecimal(self, /)\n"," |      Return True if the string is a decimal string, False otherwise.\n"," |      \n"," |      A string is a decimal string if all characters in the string are decimal and\n"," |      there is at least one character in the string.\n"," |  \n"," |  isdigit(self, /)\n"," |      Return True if the string is a digit string, False otherwise.\n"," |      \n"," |      A string is a digit string if all characters in the string are digits and there\n"," |      is at least one character in the string.\n"," |  \n"," |  isidentifier(self, /)\n"," |      Return True if the string is a valid Python identifier, False otherwise.\n"," |      \n"," |      Call keyword.iskeyword(s) to test whether string s is a reserved identifier,\n"," |      such as \"def\" or \"class\".\n"," |  \n"," |  islower(self, /)\n"," |      Return True if the string is a lowercase string, False otherwise.\n"," |      \n"," |      A string is lowercase if all cased characters in the string are lowercase and\n"," |      there is at least one cased character in the string.\n"," |  \n"," |  isnumeric(self, /)\n"," |      Return True if the string is a numeric string, False otherwise.\n"," |      \n"," |      A string is numeric if all characters in the string are numeric and there is at\n"," |      least one character in the string.\n"," |  \n"," |  isprintable(self, /)\n"," |      Return True if the string is printable, False otherwise.\n"," |      \n"," |      A string is printable if all of its characters are considered printable in\n"," |      repr() or if it is empty.\n"," |  \n"," |  isspace(self, /)\n"," |      Return True if the string is a whitespace string, False otherwise.\n"," |      \n"," |      A string is whitespace if all characters in the string are whitespace and there\n"," |      is at least one character in the string.\n"," |  \n"," |  istitle(self, /)\n"," |      Return True if the string is a title-cased string, False otherwise.\n"," |      \n"," |      In a title-cased string, upper- and title-case characters may only\n"," |      follow uncased characters and lowercase characters only cased ones.\n"," |  \n"," |  isupper(self, /)\n"," |      Return True if the string is an uppercase string, False otherwise.\n"," |      \n"," |      A string is uppercase if all cased characters in the string are uppercase and\n"," |      there is at least one cased character in the string.\n"," |  \n"," |  join(self, iterable, /)\n"," |      Concatenate any number of strings.\n"," |      \n"," |      The string whose method is called is inserted in between each given string.\n"," |      The result is returned as a new string.\n"," |      \n"," |      Example: '.'.join(['ab', 'pq', 'rs']) -> 'ab.pq.rs'\n"," |  \n"," |  ljust(self, width, fillchar=' ', /)\n"," |      Return a left-justified string of length width.\n"," |      \n"," |      Padding is done using the specified fill character (default is a space).\n"," |  \n"," |  lower(self, /)\n"," |      Return a copy of the string converted to lowercase.\n"," |  \n"," |  lstrip(self, chars=None, /)\n"," |      Return a copy of the string with leading whitespace removed.\n"," |      \n"," |      If chars is given and not None, remove characters in chars instead.\n"," |  \n"," |  partition(self, sep, /)\n"," |      Partition the string into three parts using the given separator.\n"," |      \n"," |      This will search for the separator in the string.  If the separator is found,\n"," |      returns a 3-tuple containing the part before the separator, the separator\n"," |      itself, and the part after it.\n"," |      \n"," |      If the separator is not found, returns a 3-tuple containing the original string\n"," |      and two empty strings.\n"," |  \n"," |  removeprefix(self, prefix, /)\n"," |      Return a str with the given prefix string removed if present.\n"," |      \n"," |      If the string starts with the prefix string, return string[len(prefix):].\n"," |      Otherwise, return a copy of the original string.\n"," |  \n"," |  removesuffix(self, suffix, /)\n"," |      Return a str with the given suffix string removed if present.\n"," |      \n"," |      If the string ends with the suffix string and that suffix is not empty,\n"," |      return string[:-len(suffix)]. Otherwise, return a copy of the original\n"," |      string.\n"," |  \n"," |  replace(self, old, new, count=-1, /)\n"," |      Return a copy with all occurrences of substring old replaced by new.\n"," |      \n"," |        count\n"," |          Maximum number of occurrences to replace.\n"," |          -1 (the default value) means replace all occurrences.\n"," |      \n"," |      If the optional argument count is given, only the first count occurrences are\n"," |      replaced.\n"," |  \n"," |  rfind(...)\n"," |      S.rfind(sub[, start[, end]]) -> int\n"," |      \n"," |      Return the highest index in S where substring sub is found,\n"," |      such that sub is contained within S[start:end].  Optional\n"," |      arguments start and end are interpreted as in slice notation.\n"," |      \n"," |      Return -1 on failure.\n"," |  \n"," |  rindex(...)\n"," |      S.rindex(sub[, start[, end]]) -> int\n"," |      \n"," |      Return the highest index in S where substring sub is found,\n"," |      such that sub is contained within S[start:end].  Optional\n"," |      arguments start and end are interpreted as in slice notation.\n"," |      \n"," |      Raises ValueError when the substring is not found.\n"," |  \n"," |  rjust(self, width, fillchar=' ', /)\n"," |      Return a right-justified string of length width.\n"," |      \n"," |      Padding is done using the specified fill character (default is a space).\n"," |  \n"," |  rpartition(self, sep, /)\n"," |      Partition the string into three parts using the given separator.\n"," |      \n"," |      This will search for the separator in the string, starting at the end. If\n"," |      the separator is found, returns a 3-tuple containing the part before the\n"," |      separator, the separator itself, and the part after it.\n"," |      \n"," |      If the separator is not found, returns a 3-tuple containing two empty strings\n"," |      and the original string.\n"," |  \n"," |  rsplit(self, /, sep=None, maxsplit=-1)\n"," |      Return a list of the substrings in the string, using sep as the separator string.\n"," |      \n"," |        sep\n"," |          The separator used to split the string.\n"," |      \n"," |          When set to None (the default value), will split on any whitespace\n"," |          character (including \\\\n \\\\r \\\\t \\\\f and spaces) and will discard\n"," |          empty strings from the result.\n"," |        maxsplit\n"," |          Maximum number of splits (starting from the left).\n"," |          -1 (the default value) means no limit.\n"," |      \n"," |      Splitting starts at the end of the string and works to the front.\n"," |  \n"," |  rstrip(self, chars=None, /)\n"," |      Return a copy of the string with trailing whitespace removed.\n"," |      \n"," |      If chars is given and not None, remove characters in chars instead.\n"," |  \n"," |  split(self, /, sep=None, maxsplit=-1)\n"," |      Return a list of the substrings in the string, using sep as the separator string.\n"," |      \n"," |        sep\n"," |          The separator used to split the string.\n"," |      \n"," |          When set to None (the default value), will split on any whitespace\n"," |          character (including \\\\n \\\\r \\\\t \\\\f and spaces) and will discard\n"," |          empty strings from the result.\n"," |        maxsplit\n"," |          Maximum number of splits (starting from the left).\n"," |          -1 (the default value) means no limit.\n"," |      \n"," |      Note, str.split() is mainly useful for data that has been intentionally\n"," |      delimited.  With natural text that includes punctuation, consider using\n"," |      the regular expression module.\n"," |  \n"," |  splitlines(self, /, keepends=False)\n"," |      Return a list of the lines in the string, breaking at line boundaries.\n"," |      \n"," |      Line breaks are not included in the resulting list unless keepends is given and\n"," |      true.\n"," |  \n"," |  startswith(...)\n"," |      S.startswith(prefix[, start[, end]]) -> bool\n"," |      \n"," |      Return True if S starts with the specified prefix, False otherwise.\n"," |      With optional start, test S beginning at that position.\n"," |      With optional end, stop comparing S at that position.\n"," |      prefix can also be a tuple of strings to try.\n"," |  \n"," |  strip(self, chars=None, /)\n"," |      Return a copy of the string with leading and trailing whitespace removed.\n"," |      \n"," |      If chars is given and not None, remove characters in chars instead.\n"," |  \n"," |  swapcase(self, /)\n"," |      Convert uppercase characters to lowercase and lowercase characters to uppercase.\n"," |  \n"," |  title(self, /)\n"," |      Return a version of the string where each word is titlecased.\n"," |      \n"," |      More specifically, words start with uppercased characters and all remaining\n"," |      cased characters have lower case.\n"," |  \n"," |  translate(self, table, /)\n"," |      Replace each character in the string using the given translation table.\n"," |      \n"," |        table\n"," |          Translation table, which must be a mapping of Unicode ordinals to\n"," |          Unicode ordinals, strings, or None.\n"," |      \n"," |      The table must implement lookup/indexing via __getitem__, for instance a\n"," |      dictionary or list.  If this operation raises LookupError, the character is\n"," |      left untouched.  Characters mapped to None are deleted.\n"," |  \n"," |  upper(self, /)\n"," |      Return a copy of the string converted to uppercase.\n"," |  \n"," |  zfill(self, width, /)\n"," |      Pad a numeric string with zeros on the left, to fill a field of the given width.\n"," |      \n"," |      The string is never truncated.\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Static methods defined here:\n"," |  \n"," |  __new__(*args, **kwargs) from builtins.type\n"," |      Create and return a new object.  See help(type) for accurate signature.\n"," |  \n"," |  maketrans(...)\n"," |      Return a translation table usable for str.translate().\n"," |      \n"," |      If there is only one argument, it must be a dictionary mapping Unicode\n"," |      ordinals (integers) or characters to Unicode ordinals, strings or None.\n"," |      Character keys will be then converted to ordinals.\n"," |      If there are two arguments, they must be strings of equal length, and\n"," |      in the resulting dictionary, each character in x will be mapped to the\n"," |      character at the same position in y. If there is a third argument, it\n"," |      must be a string, whose characters will be mapped to None in the result.\n","\n"]}]},{"cell_type":"code","source":["def data(tag,word):\n","    print('<',tag,'>', word, '</',tag,'>')\n","result = data('i','Python')\n","result = data('b','Python Tutorial')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5J0ExYFsC8bF","executionInfo":{"status":"ok","timestamp":1725446414124,"user_tz":-330,"elapsed":3,"user":{"displayName":"Jyoti Patil","userId":"12077577292640517473"}},"outputId":"e169cbbe-1bc6-4cc3-ba1c-b5d26341ad85"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["< i > Python </ i >\n","< b > Python Tutorial </ b >\n"]}]},{"cell_type":"code","source":["def data(char,word):\n","    print(char[0:int((len(char))/2)],word,char[int((len(char)/2)):])\n","result = data('[[]]','Python')\n","result = data('{{}}','PHP')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kDdxAQs-nwhm","executionInfo":{"status":"ok","timestamp":1725447675008,"user_tz":-330,"elapsed":532,"user":{"displayName":"Jyoti Patil","userId":"12077577292640517473"}},"outputId":"94dcdbd6-3d6e-4a68-b9ed-18a6c7a6413a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ Python ]]\n","{{ PHP }}\n"]}]},{"cell_type":"code","source":["def string(word):\n","    n =len(word)\n","    if len(word) >=2:\n","        print(word[n-2:]*4)\n","result = string('python')\n","result = string('Exercises')"],"metadata":{"id":"Mx9kFWgWsp29","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1725448802643,"user_tz":-330,"elapsed":497,"user":{"displayName":"Jyoti Patil","userId":"12077577292640517473"}},"outputId":"75326080-7eef-4b0f-f580-cfc0eae5dd0d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["onononon\n","eseseses\n"]}]},{"cell_type":"code","source":["# Write a Python function to get a string made of its first three characters of a specified string.\n","# If the length of the string is less than 3 then return the original string.\n","def st(word):\n","    if len(word)>=3:\n","        print(word[0:3])\n","    else:\n","        print(word)\n","result = st('fight')\n","result = st('dr')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vy3rjfQSw50V","executionInfo":{"status":"ok","timestamp":1725450120785,"user_tz":-330,"elapsed":481,"user":{"displayName":"Jyoti Patil","userId":"12077577292640517473"}},"outputId":"e33e2bfb-444a-483e-e9be-222a7e62f12e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["fig\n","dr\n"]}]},{"cell_type":"code","source":["# Write a Python function to reverses a string if it's length is a multiple of 4.\n","def l_4(word):\n","    if len(word)&4 == 0:\n","        print(word[(len(word))::-1])\n","result = l_4('abcdefgh')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RKQbOofQ_qUs","executionInfo":{"status":"ok","timestamp":1725520152493,"user_tz":-330,"elapsed":1769,"user":{"displayName":"Jyoti Patil","userId":"12077577292640517473"}},"outputId":"4a23853c-88ee-4392-ce2b-da0495f842e9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["hgfedcba\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"lxWqQ-l9BFPc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["s = '12345'\n","len(s)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HYtzsGQasTi2","executionInfo":{"status":"ok","timestamp":1725447648875,"user_tz":-330,"elapsed":456,"user":{"displayName":"Jyoti Patil","userId":"12077577292640517473"}},"outputId":"6dd941e8-799c-45b1-c417-70c7edad220f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["5"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["# Write a Python program to get the last part of a string before a specified character.\n","#https://www.w3resource.com/python-exercises\n","s = input('Enter string:')\n","char = input('Enter character:')\n","s1 =''\n","for i in s:\n","  if i != char:\n","   s1 =s1+i"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0HCkVEnMZLjM","executionInfo":{"status":"ok","timestamp":1725360465933,"user_tz":-330,"elapsed":5062,"user":{"displayName":"Jyoti Patil","userId":"12077577292640517473"}},"outputId":"1b44c150-99bd-474d-a940-4162a7c4c308"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Enter string:https://www.w3resource.com/python-exercises\n","Enter character:-\n"]},{"output_type":"execute_result","data":{"text/plain":["['https://www.w3resource.com/python', 'exercises']"]},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["q = input('Enter string:')\n","char = input('Enter character:')\n","q1 =q.split(char)\n","q1\n","''.join(q1[0])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":70},"id":"SMOlSpwbhmdx","executionInfo":{"status":"ok","timestamp":1725361238867,"user_tz":-330,"elapsed":5071,"user":{"displayName":"Jyoti Patil","userId":"12077577292640517473"}},"outputId":"e0982690-1cbd-4d3c-9cf2-df3c81421f4e"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Enter string:https://www.w3resource.com/python-exercises\n","Enter character:-\n"]},{"output_type":"execute_result","data":{"text/plain":["'https://www.w3resource.com/python'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":27}]},{"cell_type":"code","source":[],"metadata":{"id":"EPmsX5dvV7vp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Write a Python program to print the following floating numbers upto 2 decimal places.\n","num = float(input('enter no.:'))\n","round(num,2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6UhCnoO4T-Zz","executionInfo":{"status":"ok","timestamp":1725525368975,"user_tz":-330,"elapsed":5737,"user":{"displayName":"Jyoti Patil","userId":"12077577292640517473"}},"outputId":"f3ccd260-6085-443a-e982-32190cc83a60"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["enter no.:546.2154\n"]},{"output_type":"execute_result","data":{"text/plain":["546.22"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["#31 Write a Python program to print the following floating numbers upto 2 decimal places with a sign.\n","num1 = float(input('Enter no.:'))\n","print('Formated Value: '+'{:+.2f}'.format(num1))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iU0UgrTyU7W7","executionInfo":{"status":"ok","timestamp":1725526035523,"user_tz":-330,"elapsed":6241,"user":{"displayName":"Jyoti Patil","userId":"12077577292640517473"}},"outputId":"b8347d25-c8c5-41bc-dc77-cec2287c5e5f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter no.:-56.514\n","Formated Value: -56.51\n"]}]},{"cell_type":"code","source":["text_1 = input('Enter text: ')\n","text_1.ljust(100,'-')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":111},"id":"73yQv1qiaKpS","executionInfo":{"status":"ok","timestamp":1725695073314,"user_tz":-330,"elapsed":4862,"user":{"displayName":"Jyoti Patil","userId":"12077577292640517473"}},"outputId":"1388ba97-1572-407a-c776-f2afb9738f2e"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Enter text: 'capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'removeprefix', 'removesuffix', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill'\n"]},{"output_type":"execute_result","data":{"text/plain":["\"'capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'removeprefix', 'removesuffix', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill'\""],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["text_1.rjust(100,\" \")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":72},"id":"q9KnpsCubazf","executionInfo":{"status":"ok","timestamp":1725695037269,"user_tz":-330,"elapsed":554,"user":{"displayName":"Jyoti Patil","userId":"12077577292640517473"}},"outputId":"116eaa44-a719-4a1c-f538-5af55f3123c3"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["\"'capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'removeprefix', 'removesuffix', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill'\""],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["# 32. Write a Python program to print the following floating numbers with no decimal places.\n","f = int(float(input('Enter float no.:')))\n","f\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SKYaPOuOXPfc","executionInfo":{"status":"ok","timestamp":1725526272871,"user_tz":-330,"elapsed":4378,"user":{"displayName":"Jyoti Patil","userId":"12077577292640517473"}},"outputId":"154629b3-c1bb-425a-ffd2-863b9f0a8ee7"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Enter float no.:53.236\n"]},{"output_type":"execute_result","data":{"text/plain":["53"]},"metadata":{},"execution_count":26}]},{"cell_type":"code","source":["# Write a Python program to print the following integers with zeros on the left of specified width.\n","f = int(input('Enter float no.:'))\n","g = int(input('Enter no. of zero:'))\n","result = str(f).zfill(g)\n","print(result)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kZkSVRp_Wx2z","executionInfo":{"status":"ok","timestamp":1725526620138,"user_tz":-330,"elapsed":5887,"user":{"displayName":"Jyoti Patil","userId":"12077577292640517473"}},"outputId":"97f3bbed-0fa6-4321-b14b-0e3cbf2f7594"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter float no.:56\n","Enter no. of zero:75\n","000000000000000000000000000000000000000000000000000000000000000000000000056\n"]}]},{"cell_type":"code","source":["# 34. Write a Python program to print the following integers with '*' on the right of specified width.\n","f = input('Enter string: ')\n","n = int(input('Enter no. of * to added: '))\n","print(f+'*'*n)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5NKlx4mI7nZq","executionInfo":{"status":"ok","timestamp":1725687789964,"user_tz":-330,"elapsed":7928,"user":{"displayName":"Jyoti Patil","userId":"12077577292640517473"}},"outputId":"44e56238-76e1-4e7f-8ed6-2a2739db0c44"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter string: dgbtfhrb\n","Enter no. of * to added: 6\n","dgbtfhrb******\n"]}]},{"cell_type":"code","source":["# 35. Write a Python program to display a number with a comma separator.\n","def comma_sep(num,digit):\n","    for i in range(num):\n","        if i ==:\n","            i = -1(digit)*"],"metadata":{"id":"T95BsU3IAoZ5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Write a Python program to count occurrences of a substring in a string.\n","str2 = input('Enter string: ')\n","substring_2 =input('Enter sub string: ')\n","count = 0\n","while"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WcTgMOdIZ0La","executionInfo":{"status":"ok","timestamp":1725533005958,"user_tz":-330,"elapsed":7534,"user":{"displayName":"Jyoti Patil","userId":"12077577292640517473"}},"outputId":"a6d9f9fe-4aeb-4a01-a991-76f6094be8f1"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Enter string: cscscscsc\n","Enter sub string: csc\n"]}]},{"cell_type":"code","source":["# 39. Write a Python program to reverse a string.\n","s = input('Enter str: ')\n","s[len(s)-1::-1]"],"metadata":{"id":"HB1tgEE92dmx","colab":{"base_uri":"https://localhost:8080/","height":54},"executionInfo":{"status":"ok","timestamp":1725594080251,"user_tz":-330,"elapsed":11000,"user":{"displayName":"Jyoti Patil","userId":"12077577292640517473"}},"outputId":"8fd0a204-22b1-4804-d3ef-2178c80a708e"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Enter str: Hare ram\n"]},{"output_type":"execute_result","data":{"text/plain":["'mar eraH'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":2}]},{"cell_type":"code","source":["# 40. Write a Python program to reverse words in a string.\n","s = (input('Enter string: ')).split(' ')\n","' '.join(s[len(s)-1::-1])\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":54},"id":"w5XP-cpD3Cc4","executionInfo":{"status":"ok","timestamp":1725594296890,"user_tz":-330,"elapsed":6226,"user":{"displayName":"Jyoti Patil","userId":"12077577292640517473"}},"outputId":"49125704-4aca-4a40-dd43-cc0ef161cd84"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Enter string: Hare Ram\n"]},{"output_type":"execute_result","data":{"text/plain":["'Ram Hare'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["# 41. Write a Python program to strip a set of characters from a string.\n","s = '***print&&&&'\n","s.strip('*&')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":36},"id":"WA7G28ZLbnc0","executionInfo":{"status":"ok","timestamp":1725594459729,"user_tz":-330,"elapsed":587,"user":{"displayName":"Jyoti Patil","userId":"12077577292640517473"}},"outputId":"5c0565c4-e92d-4d4e-ffef-6290a0e152b2"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'print'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["# Write apython program to count repeated characters in a string.\n","# Sample string: 'thequickbrownfoxjumpsoverthelazydog'\n","str_2 = list(input('Enter String: '))\n","for i in range(0,len(str_2)):\n","    count = 1\n","    for j in range(i+1,len(str_2)):\n","        if str_2[i]==str_2[j]:\n","            count += 1\n","            str_2[j]='0'\n","    if(str_2[i] != \"0\"):\n","        print(str_2[i]+' '+str(count),end =\", \")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xJqEtIyYcehZ","executionInfo":{"status":"ok","timestamp":1725595553073,"user_tz":-330,"elapsed":4139,"user":{"displayName":"Jyoti Patil","userId":"12077577292640517473"}},"outputId":"c924e3a1-e1da-476e-cb34-424a44f7a07c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter String: thequickbrownfoxjumpsoverthelazydog\n","t 2, h 2, e 3, q 1, u 2, i 1, c 1, k 1, b 1, r 2, o 4, w 1, n 1, f 1, x 1, j 1, m 1, p 1, s 1, v 1, l 1, a 1, z 1, y 1, d 1, g 1, "]}]},{"cell_type":"code","source":["str_3 = 'google.com'\n","dict = {}               # Initialize an empty dictionary named 'dict' to store character frequencies.\n","for n in str_3:         # Iterate through each character 'n' in the input string str1.\n","    g = dict.keys()     # Retrieve the keys (unique characters) in the 'dict' dictionary.\n","    if n in g:          # Check if the character 'n' is already a key in the dictionary.\n","        dict[n] += 1    # If 'n' is already a key, increment its value (frequency) by 1.\n","    else:\n","        dict[n] = 1     # If 'n' is not a key, add it to the dictionary with a frequency of 1\n","print(dict)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YvubNasuhpFC","executionInfo":{"status":"ok","timestamp":1725599665016,"user_tz":-330,"elapsed":771,"user":{"displayName":"Jyoti Patil","userId":"12077577292640517473"}},"outputId":"c99e3fe0-97ad-4573-a280-bbb0f0ef1899"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'g': 2, 'o': 3, 'l': 1, 'e': 1, '.': 1, 'c': 1, 'm': 1}\n"]}]},{"cell_type":"code","source":["# 44. Write a Python program to print the index of the character in a string. Sample string: w3resource\n","str_1 = input('Enter the String: ')\n","for i in range(0,len(str_1)):\n","    print('Current Charachter ',str(str_1[i]),' is at position ',i)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mgHwjRPAqNN9","executionInfo":{"status":"ok","timestamp":1725598463301,"user_tz":-330,"elapsed":3732,"user":{"displayName":"Jyoti Patil","userId":"12077577292640517473"}},"outputId":"5dafe279-5158-458f-dd45-0a77ed7fe3f8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the String: w3resource\n","Current Charachter  w  is at position  0\n","Current Charachter  3  is at position  1\n","Current Charachter  r  is at position  2\n","Current Charachter  e  is at position  3\n","Current Charachter  s  is at position  4\n","Current Charachter  o  is at position  5\n","Current Charachter  u  is at position  6\n","Current Charachter  r  is at position  7\n","Current Charachter  c  is at position  8\n","Current Charachter  e  is at position  9\n"]}]},{"cell_type":"code","source":["# 45.Write a Python program to check if a string contains all letters of the alphabet.\n","str_1 = set((input('Enter the String: ')).upper())\n","alpha_str = set(('abcdefghijklmnopqrstuvwxyz').upper())\n","if str_1 >= alpha_str:\n","    print(True)\n","else:\n","    print(False)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QLSGgv-Frx7Z","executionInfo":{"status":"ok","timestamp":1725600791017,"user_tz":-330,"elapsed":4083,"user":{"displayName":"Jyoti Patil","userId":"12077577292640517473"}},"outputId":"eb8bf9b0-eaeb-45eb-d1f8-008f4f618143"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the String: thequickbrownfoxjumpsoverthelazydog\n","True\n"]}]},{"cell_type":"code","source":["# 46. Write a Python program to convert a string in a list.\n","str_5 = input('Enter the String: ')\n","s1 = list(str_5)\n","s2 = str_5.split(' ')\n","print(s1)\n","print(s2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zsCv3vQy0p4R","executionInfo":{"status":"ok","timestamp":1725601128634,"user_tz":-330,"elapsed":16081,"user":{"displayName":"Jyoti Patil","userId":"12077577292640517473"}},"outputId":"5229d6f4-c3f2-459f-ddc2-6bb47d36b4f2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the String: Happy Teacher's Day\n","['H', 'a', 'p', 'p', 'y', ' ', 'T', 'e', 'a', 'c', 'h', 'e', 'r', \"'\", 's', ' ', 'D', 'a', 'y']\n","['Happy', \"Teacher's\", 'Day']\n"]}]},{"cell_type":"code","source":["# 47. Write a Python program to lowercase first n characters in a string.\n","a = input('Enter string: ')\n","n = int(input('Enter number of string: '))\n","a2 =(a[0:n])\n","print(a2.lower()+a[n:])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Dxkyot9z2CVQ","executionInfo":{"status":"ok","timestamp":1725605888870,"user_tz":-330,"elapsed":28821,"user":{"displayName":"Jyoti Patil","userId":"12077577292640517473"}},"outputId":"75394b7a-44ee-4ba2-94bc-04622e8f2095"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter string: PROGRAM TO LOWERCASE\n","Enter number of string: 6\n","prograM TO LOWERCASE\n"]}]},{"cell_type":"code","source":["# 48. Write a Python program to swap comma and dot in a string. Sample string: \"32.054,23\"\n","S = \"32.054,23\"\n","s1 = S.replace('.',' ')\n","s2 = s1.replace(',','.')\n","s3 = s2.replace(' ',',')\n","s3"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":36},"id":"VuRmvTAGIJXp","executionInfo":{"status":"ok","timestamp":1725606384290,"user_tz":-330,"elapsed":620,"user":{"displayName":"Jyoti Patil","userId":"12077577292640517473"}},"outputId":"3a137d52-9119-4a66-937b-d90dfe276423"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'32,054.23'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["# Write a Python program to count and display the vowels of a given text.\n","str_1 = input('Enter string: ')\n","vowels = 'aieou'\n","str_1.casefold()\n","count = {}.fromkeys(vowels,0)\n","for i in str_1:\n","    if i in count:\n","        count[i] += 1\n","print(count)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QUUg3ifeKB1h","executionInfo":{"status":"ok","timestamp":1725610311863,"user_tz":-330,"elapsed":4084,"user":{"displayName":"Jyoti Patil","userId":"12077577292640517473"}},"outputId":"63008fef-1b5c-451b-8223-b3467451b94a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter string: program to count and display\n","{'a': 3, 'i': 1, 'e': 0, 'o': 3, 'u': 1}\n"]}]},{"cell_type":"code","source":["# Write a Python program to split a string on the last occurrence of the delimiter.\n","str_1 = input('Enter string: ')\n","str_1.rsplit(',',1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fmWNsqaLZB-I","executionInfo":{"status":"ok","timestamp":1725610883238,"user_tz":-330,"elapsed":36798,"user":{"displayName":"Jyoti Patil","userId":"12077577292640517473"}},"outputId":"12a0f45f-1cdd-4a9a-83e8-519ff1460c6e"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Enter string: Apple, Orange, Pineapple, Kiwi, Grapes\n"]},{"output_type":"execute_result","data":{"text/plain":["['Apple, Orange, Pineapple, Kiwi', ' Grapes']"]},"metadata":{},"execution_count":40}]},{"cell_type":"code","source":[],"metadata":{"id":"RLn5as0p7iob"},"execution_count":null,"outputs":[]}]}